{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hashbarran","fornum","random_chars","random_string","i","random_nums","Math","floor","random","length","slice","random_dom","hashbar_a","setTimeout","endValue","eq","attr","changeValue","j","substring","text","create_random_string","document","getElementById","react_default","a","createElement","className","id","endvalue","openurl","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRA8FeA,qBA1Fb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,qFAMN,SAASO,EAAWC,GAKlB,IAJA,IAAIC,EAAe,mDAGfC,EAAgB,GACXC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC9B,IAAIC,EAAcC,KAAKC,MAAOD,KAAKE,SAAWN,EAAaO,OAAU,GACrEN,GAAiBD,EAAaQ,MAAML,EAAaA,EAAc,GAGlE,OAAOF,GAGV,SAA8BQ,GAI3B,IAFA,IAAIC,EAAYD,EAEPP,EAAI,EAAGA,EAAIQ,EAAUH,OAAQL,KACnC,SAAWA,GACRS,WAAW,WAKR,IAJA,IAAIC,EAAWF,EAAUG,GAAGX,GAAGY,KAAK,YAEhCC,EAAc,GAETC,EAAI,EAAGA,GAAKJ,EAASL,OAAS,EAAGS,KAEvC,SAAWA,GACRL,WAAW,WAERI,EAAcH,EAASK,UAAU,EAAGD,GAAKlB,EAAWc,EAASL,OAASS,GAElEA,IAAMJ,EAASL,OAAS,EACzBG,EAAUG,GAAGX,GAAGgB,KAAKN,GAGrBF,EAAUG,GAAGX,GAAGgB,KAAKH,IAGlB,IAALC,GAZP,CAcGA,IAIA,IAALd,GA1BP,CA4BGA,GAhDRiB,CAAqBC,SAASC,eAAe,iDAsD7C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,gBACAH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kCAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcC,GAAG,cAAcC,SAAS,eAAtD,eACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBG,QAAQ,mBACvCN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBG,QAAQ,mBACxCN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBG,QAAQ,sBAK5CN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAKfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,yBAtFUI,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASjB,SAASC,eAAe,SD0H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cd1ee4d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n\n    create_random_string(document.getElementById(\"theHostName\"));\n    \n    function hashbarran(fornum) {\n      var random_chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';\n   \n      //console.log(random_chars.slice(random_nums,random_nums+1));\n      var random_string = '';\n      for (var i = 0; i < fornum; i++) {\n         var random_nums = Math.floor((Math.random() * random_chars.length) + 1);\n         random_string += random_chars.slice(random_nums, random_nums + 1);\n      }\n   \n      return random_string;\n   }\n   \n   function create_random_string(random_dom) {\n   \n      var hashbar_a = random_dom;\n   \n      for (var i = 0; i < hashbar_a.length; i++) {\n         (function (i) {\n            setTimeout(function () {\n               var endValue = hashbar_a.eq(i).attr(\"endvalue\");\n               // console.log(endValue);//最後的值;\n               var changeValue = '';\n   \n               for (var j = 0; j <= endValue.length + 1; j++) {\n   \n                  (function (j) {\n                     setTimeout(function () {\n   \n                        changeValue = endValue.substring(0, j) + hashbarran(endValue.length - j);\n   \n                        if (j === endValue.length + 1) {\n                           hashbar_a.eq(i).text(endValue);\n                        }\n                        else {\n                           hashbar_a.eq(i).text(changeValue);\n                        }\n   \n                     }, (j) * 100);\n   \n                  })(j);\n   \n               }\n   \n            }, (i) * 450);\n   \n         })(i);\n      }\n   }\n   \n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <ul>\n            <li className=\"active\">主頁</li>\n            <li>關於</li>\n            <li>卡片</li>\n            <li>影片牆</li>\n          </ul>\n        </header>\n        <div className=\"section section1\">\n          <div className=\"myNameTitleAll\">\n            <h1 className=\"myNameTitle\" id=\"theHostName\" endvalue=\"Wilson Chen\">Wilson Chen</h1>\n            <div className=\"communityIcon\">\n              <i className=\"fab fa-facebook\" openurl=\"www.fb.com/aaa\"></i>\n              <i className=\"fab fa-instagram\" openurl=\"www.fb.com/aaa\"></i>\n              <i className=\"fab fa-youtube\" openurl=\"www.fb.com/aaa\"></i>\n\n            </div>\n          </div>\n        </div>\n        <div className=\"section section2\">\n\n\n        </div>\n\n        <div className=\"top\">Scroll To Top</div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './All.scss';\nimport './Reset.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}